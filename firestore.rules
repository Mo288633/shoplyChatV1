rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidTimestampField(timeValue) {
      return timeValue is timestamp &&
             request.time.seconds >= timeValue.seconds;
    }

    function hasRequiredFields(data, fields) {
      return data.keys().hasAll(fields);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isAuthenticated() && 
                   request.auth.uid == userId &&
                   hasRequiredFields(request.resource.data, ['email', 'name', 'createdAt', 'updatedAt']) &&
                   request.resource.data.email is string &&
                   request.resource.data.name is string &&
                   isValidTimestampField(request.resource.data.createdAt) &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow update: if isOwner(userId) &&
                   request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['name', 'profileImage', 'settings', 'updatedAt']) &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow delete: if false; // Prevent user deletion
    }

    // Plans collection
    match /plans/{planId} {
      allow read: if true; // Public access to read plans
      allow write: if false; // Only admin can modify plans through the admin SDK
    }

    // Subscriptions collection
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   hasRequiredFields(request.resource.data, [
                     'userId', 'planId', 'status', 'startDate', 
                     'endDate', 'isYearly', 'createdAt', 'updatedAt'
                   ]) &&
                   request.resource.data.status in ['active', 'cancelled', 'expired'] &&
                   isValidTimestampField(request.resource.data.startDate) &&
                   isValidTimestampField(request.resource.data.endDate) &&
                   request.resource.data.isYearly is bool &&
                   isValidTimestampField(request.resource.data.createdAt) &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid &&
                   request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['status', 'endDate', 'updatedAt']) &&
                   request.resource.data.status in ['active', 'cancelled', 'expired'] &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow delete: if false; // Prevent subscription deletion
    }

    // Invoices collection
    match /invoices/{invoiceId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   hasRequiredFields(request.resource.data, [
                     'userId', 'subscriptionId', 'amount', 'status',
                     'date', 'number', 'items', 'createdAt', 'updatedAt'
                   ]) &&
                   request.resource.data.amount is number &&
                   request.resource.data.amount >= 0 &&
                   request.resource.data.status in ['paid', 'pending', 'failed'] &&
                   request.resource.data.number is string &&
                   request.resource.data.items is list &&
                   isValidTimestampField(request.resource.data.date) &&
                   isValidTimestampField(request.resource.data.createdAt) &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow update: if false; // Invoices should not be modified once created
      allow delete: if false; // Prevent invoice deletion
    }

    // Chatbots collection
    match /chatbots/{chatbotId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   hasRequiredFields(request.resource.data, [
                     'userId', 'name', 'status', 'model', 'settings',
                     'createdAt', 'updatedAt'
                   ]) &&
                   request.resource.data.status in ['online', 'training', 'offline'] &&
                   isValidTimestampField(request.resource.data.createdAt) &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Conversations collection
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   hasRequiredFields(request.resource.data, [
                     'chatbotId', 'userId', 'customerId', 'status',
                     'lastMessageAt', 'createdAt', 'updatedAt'
                   ]) &&
                   request.resource.data.status in ['active', 'closed'] &&
                   isValidTimestampField(request.resource.data.lastMessageAt) &&
                   isValidTimestampField(request.resource.data.createdAt) &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid &&
                   isValidTimestampField(request.resource.data.updatedAt);
      allow delete: if false; // Preserve conversation history
    }

    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                 get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.userId == request.auth.uid &&
                   hasRequiredFields(request.resource.data, [
                     'conversationId', 'content', 'role', 'createdAt'
                   ]) &&
                   request.resource.data.role in ['user', 'assistant', 'system'] &&
                   isValidTimestampField(request.resource.data.createdAt);
      allow update: if false; // Messages should not be modified once created
      allow delete: if false; // Preserve message history
    }
  }
}